digraph G {
    node [shape=box];

    start [label="Start", shape=circle, style=filled, fillcolor=black, width=0.2];
    end [label="Ende", shape=doublecircle, style=filled, fillcolor=black, width=0.2];

    subgraph cluster_p1 {
        label = "Planning Meeting #1";
        style=filled;
        color=lightgrey;

        presentAgenda [label="PO präsentiert Agenda"];
        presentSprintGoal [label="PO stellt Sprintziel vor"];
        overviewRequirements [label="Überblick über Anforderungen"];
        reviewLastSprint [label="Rückblick auf den letzten Sprint"];
        calculateVelocity [label="Neue Kapazität (Velocity) ermitteln"];
        discussRequirement [label="Anforderung diskutieren"];
        analyzeInfluences [label="Einflussfaktoren analysieren"];
        estimateRequirement [label="Anforderung schätzen (Planning Poker)"];
        decideOnRequirement [label="Entscheidung über Anforderung", shape=diamond];
        addToBacklog [label="In selektiertes Produkt Backlog aufnehmen"];
        putBackToProductBacklog [label="Zurück ins Produkt Backlog"];
        adjustGoal [label="Sprintziel anpassen (falls nötig)"];
        forecast [label="Forecast durchführen"];
        documentResults [label="Ergebnisse in Confluence dokumentieren"];
        joinNode [label="", shape=diamond];

        presentAgenda -> presentSprintGoal -> overviewRequirements -> reviewLastSprint -> calculateVelocity -> discussRequirement;
        discussRequirement -> analyzeInfluences -> estimateRequirement -> decideOnRequirement;
        decideOnRequirement -> addToBacklog [label="ja"];
        decideOnRequirement -> putBackToProductBacklog [label="nein"];
        addToBacklog -> joinNode;
        putBackToProductBacklog -> joinNode;
        joinNode -> adjustGoal -> forecast;
        forecast -> documentResults -> end;
    }

    start -> presentAgenda;
}
